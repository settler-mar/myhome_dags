Задача: Разработка системы управления DAG (Directed Acyclic Graph) для асинхронной обработки данных на Python

Цель задачи:
Необходимо разработать систему, которая будет управлять DAG-ами (направленными ациклическими графами), позволяя загружать, конфигурировать и выполнять узлы (вершины) графа. Система должна поддерживать асинхронное выполнение и быть гибкой в части настройки и использования DAG-ов.

Требования к системе:
Даги (DAG Nodes):
Каждый DAG должен представлять собой узел с входами и выходами, которые могут быть подключены друг к другу.
Входы могут быть двух типов:
Данные — поступление данных на этот вход запускает выполнение и генерирует сигнал на выходе.
Параметры — поступление данных на этот вход не вызывает выполнения, но может быть использовано для конфигурации или изменения состояния узла.
Каждый выход может быть соединен с одним или несколькими входами других дагов, объединяя их через операцию "или".

Типы входов:
Обычные входы — данные поступают и запускают выполнение.
Параметрические входы — данные не запускают выполнение, а только задают параметры для выполнения.

Шаблоны:
Система должна поддерживать возможность собирать шаблоны из нескольких дагов или дриугих шаблонов.
Шаблон может содержать несколько дагов и иметь свои собственные входы, выходы и параметры.
Шаблон должен поддерживать конфигурацию, доступную как изнутри шаблона, так и снаружи для внешнего управления.

Асинхронность:
Все операции внутри DAG-ов должны поддерживать асинхронность для эффективного выполнения, особенно при наличии задержек (например, при обработке данных или ожидании внешних сигналов).
Для каждого дага должна быть предусмотрена асинхронная обработка, а также возможность использовать асинхронные методы для отправки и получения данных.

Загрузка и сохранение дагов:
Даги должны быть загружены динамически из каталогов, например, по текстовому имени.
Каждый файл с дагом должен содержать текстовое имя, версию и описание, которые будут использоваться при его загрузке.
Даги могут быть сохранены в таблице базы данных, позволяя затем загружать их по имени.
Даги можно загружать как по имени файла, так и по имени класса, если оно задано как свойство.

Метаданные:
Каждый даг должен содержать метаинформацию:
Имя
Версия
Описание

Система должна предоставлять возможность получения списка всех доступных дагов и их информации (имя, версия, описание).

Работа с каталогами:
Каталог с дагами должен быть автоматически сканируем для получения доступных дагов и их загрузки.
При загрузке дага по имени файла система должна искать класс по имени файла или классу, указанному в файле.

Использование шаблонов:
Шаблон можно создавать из нескольких дагов, а также включать один шаблон в другой, создавая таким образом иерархию дагов.
Шаблоны могут быть использованы в основном коде, как отдельные блоки, что позволяет повторно использовать конфигурации и упрощает код.

Дополнительные функциональные возможности:
Для каждого дага необходимо предусмотреть возможность асинхронной обработки входных данных и параметров.
Вывод результатов должен быть настроен для возможности отображения в консоли или для отправки данных в другие части системы.

Ожидаемый результат:
Разработана система для управления DAG-ами с возможностью загрузки, конфигурирования, асинхронного выполнения и сохранения дагов.
Реализованы шаблоны, которые позволяют повторно использовать конфигурации дагов.
Разработаны функции для асинхронной обработки данных и параметров в дагах.
Система должна состоять из 2-х глобальных классов: загрузчик и оркестратор
Вся система поддерживает загрузку дагов как из файлов, так и из базы данных.
Каждый даг имеет метаинформацию, включая имя, версию и описание, что позволяет легко работать с ними.
Система должна быть гибкой, позволяя добавлять новые узлы, шаблоны и обеспечивать их быструю настройку и выполнение.
Для управления дагами, их состоянием, управлением их работой разработать REST-API