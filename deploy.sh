#!/bin/bash

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
REPO_URL=$(git config --get remote.origin.url)
if [ -z "$REPO_URL" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º!"
    exit 1
fi

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TMP_DIR=$(mktemp -d)
CURRENT_DIR=$(pwd)
LOG_DIR="$CURRENT_DIR/logs"
mkdir -p "$LOG_DIR"

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ª–æ–≥–∞
LOG_FILE="$LOG_DIR/deploy_$(date '+%Y-%m-%d_%H-%M-%S').log"

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
cleanup() { rm -rf "$TMP_DIR"; }
trap cleanup EXIT

echo "üîÑ –ù–∞—á–∞–ª–æ –¥–µ–ø–ª–æ—è $(date)" | tee -a "$LOG_FILE"

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä..." | tee -a "$LOG_FILE"
sudo docker stop app_server >>"$LOG_FILE" 2>&1 || echo "‚ö† –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω" | tee -a "$LOG_FILE"

# –ö–ª–æ–Ω–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é
echo "üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è..." | tee -a "$LOG_FILE"
git clone --depth 1 "$REPO_URL" "$TMP_DIR" >>"$LOG_FILE" 2>&1
if [ $? -ne 0 ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!" | tee -a "$LOG_FILE"
    exit 1
fi

git reset
git add .

# –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –∏ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
echo "üìã –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏..." | tee -a "$LOG_FILE"
cd "$TMP_DIR"
python3 dist_list.py
cp file_list.txt "$CURRENT_DIR/file_list.txt"
cd "$CURRENT_DIR"

# –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
echo "üìã –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–∫–∏ —Ñ–∞–π–ª–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π..." | tee -a "$LOG_FILE"
python3 dist_list.py

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å rsync, –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤..." | tee -a "$LOG_FILE"
BUILD_FRONTEND=false
BUILD_BACKEND=false
while IFS= read -r line
do
    action=$(echo $line | cut -d ' ' -f 1)
    file=$(echo $line | cut -d ' ' -f 2)
    case $action in
        "d")
            echo "üóë –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: $file" | tee -a "$LOG_FILE"
            rm -rf "$CURRENT_DIR/$file"
            ;;
        "u")
            echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: $file" | tee -a "$LOG_FILE"
            cp "$TMP_DIR/$file" "$CURRENT_DIR/$file"
            ;;
        "c")
            echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: $file" | tee -a "$LOG_FILE"
            cp "$TMP_DIR/$file" "$CURRENT_DIR/$file"
            ;;
    esac
    if [[ $action == "u" || $action == "c" ]] && [[ $file == "frontend"* ]]; then
        BUILD_FRONTEND=true
    fi
    if [[ $action == "u" || $action == "c" ]] && [[ $file == "backend/requirements.txt" ]]; then
        BUILD_BACKEND=true
    fi
done < file_to_process.txt
git reset
rm file_to_process.txt || true
rm file_list.txt || true

if [ "$BUILD_FRONTEND" = true ]; then
    echo "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã. –§—Ä–æ–Ω—Ç–µ–Ω–¥ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω." | tee -a "$LOG_FILE"
else
    echo "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç. –ë–∏–ª–¥ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è." | tee -a "$LOG_FILE"
fi


if [ "$BUILD_BACKEND" = true ]; then
    echo "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã. –ë—ç–∫–µ–Ω–¥ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω." | tee -a "$LOG_FILE"
else
    echo "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç. –ë–∏–ª–¥ –±—ç–∫–µ–Ω–¥–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è." | tee -a "$LOG_FILE"
fi

# –ë–∏–ª–¥ –±—ç–∫–µ–Ω–¥–∞, –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
if [ "$BUILD_BACKEND" = true ]; then
    echo "‚öô –ó–∞–ø—É—Å–∫–∞–µ–º –±–∏–ª–¥ –±—ç–∫–µ–Ω–¥–∞..." | tee -a "$LOG_FILE"
    cd "$CURRENT_DIR/backend" || exit 1
    pip install -r requirements.txt --break-system-packages>>"$LOG_FILE" 2>&1
    sudo docker rm app_server --force
    sudo docker image rm server --force >>"$LOG_FILE" 2>&1
fi

# –ë–∏–ª–¥ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞, –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
if [ "$BUILD_FRONTEND" = true ]; then
    echo "‚öô –ó–∞–ø—É—Å–∫–∞–µ–º –±–∏–ª–¥ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..." | tee -a "$LOG_FILE"
     cd "$CURRENT_DIR" || exit 1
    make build_frontend >>"$LOG_FILE" 2>&1
    cd "$CURRENT_DIR"
fi

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä..." | tee -a "$LOG_FILE"
make run_prod >>"$LOG_FILE" 2>&1

echo "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω! $(date)" | tee -a "$LOG_FILE"
