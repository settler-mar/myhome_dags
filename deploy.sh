#!/bin/bash

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
REPO_URL=$(git config --get remote.origin.url)
if [ -z "$REPO_URL" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º!"
    exit 1
fi

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TMP_DIR=$(mktemp -d)
CURRENT_DIR=$(pwd)
LOG_DIR="$CURRENT_DIR/logs"
BACKUP_ROOT="$CURRENT_DIR/backup"
BACKUP_DIR="$BACKUP_ROOT/$(date '+%Y-%m-%d_%H-%M-%S')"
mkdir -p "$LOG_DIR" "$BACKUP_DIR"

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ª–æ–≥–∞
LOG_FILE="$LOG_DIR/deploy_$(date '+%Y-%m-%d_%H-%M-%S').log"

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
cleanup() { rm -rf "$TMP_DIR"; }
trap cleanup EXIT

echo "üîÑ –ù–∞—á–∞–ª–æ –¥–µ–ø–ª–æ—è $(date)" | tee -a "$LOG_FILE"

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä..." | tee -a "$LOG_FILE"
sudo docker stop app_server >>"$LOG_FILE" 2>&1 || echo "‚ö† –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω" | tee -a "$LOG_FILE"

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤—ã–±–æ—Ä –≤–µ—Ç–∫–∏
# –ü–æ–ª—É—á–µ–Ω–∏–µ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –≤–µ—Ç–æ–∫
echo "üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –≤–µ—Ç–æ–∫..." | tee -a "$LOG_FILE"
git fetch --all --prune >>"$LOG_FILE" 2>&1
REMOTE_BRANCHES_RAW=$(git branch -r | grep -v 'HEAD\|->' | sed 's|origin/||' | sort -u)

# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: master ‚Äî –ø–µ—Ä–≤–∞—è
REMOTE_BRANCHES=()
if echo "$REMOTE_BRANCHES_RAW" | grep -Fxq "master"; then
    REMOTE_BRANCHES+=("master")
fi
while IFS= read -r branch; do
    [[ $branch != "master" ]] && REMOTE_BRANCHES+=("$branch")
done <<< "$REMOTE_BRANCHES_RAW"

# –í—ã–±–æ—Ä –≤–µ—Ç–∫–∏
if [ "${#REMOTE_BRANCHES[@]}" -eq 1 ]; then
    SELECTED_BRANCH="${REMOTE_BRANCHES[0]}"
    echo "‚úÖ –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–µ—Ç–∫–∞: $SELECTED_BRANCH" | tee -a "$LOG_FILE"
else
    echo "–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ç–∫—É –¥–ª—è –¥–µ–ø–ª–æ—è:"
    select SELECTED_BRANCH in "${REMOTE_BRANCHES[@]}"; do
        [ -n "$SELECTED_BRANCH" ] && break
    done
    echo "‚úÖ –í—ã–±—Ä–∞–Ω–∞ –≤–µ—Ç–∫–∞: $SELECTED_BRANCH" | tee -a "$LOG_FILE"
fi

# –ö–ª–æ–Ω–∏—Ä—É–µ–º –≤–µ—Ç–∫—É
echo "üîÑ –ö–ª–æ–Ω–∏—Ä—É–µ–º –≤–µ—Ç–∫—É $SELECTED_BRANCH..." | tee -a "$LOG_FILE"
git clone --depth 1 --branch "$SELECTED_BRANCH" "$REPO_URL" "$TMP_DIR" >>"$LOG_FILE" 2>&1
if [ $? -ne 0 ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Ç–∫—É!" | tee -a "$LOG_FILE"
    exit 1
fi

cd "$TMP_DIR"
DEPLOY_COMMIT=$(git rev-parse --short HEAD)
DEPLOY_DATE=$(git show -s --format=%ci HEAD)
DEPLOY_MESSAGE=$(git log -1 --pretty=%s)

echo "üì¶ –ö–æ–º–º–∏—Ç –¥–ª—è –¥–µ–ø–ª–æ—è: $DEPLOY_COMMIT ($DEPLOY_DATE)" | tee -a "$LOG_FILE"
echo "üìù $DEPLOY_MESSAGE" | tee -a "$LOG_FILE"

# –ü–µ—Ä–µ–Ω–æ—Å–∏–º .git
cd "$CURRENT_DIR"
rm -rf .git
cp -r "$TMP_DIR/.git" .git

change_permissions() {
    local file="$1"
    if [ -e "$file" ]; then
        sudo chown "$(whoami):$(whoami)" "$file"
        sudo chmod u+w "$file"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å rsync, –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤:" | tee -a "$LOG_FILE"
BUILD_FRONTEND=false
BUILD_BACKEND=false
while read -r status file; do
    case $status in
        "M"|"MM")
            echo "  * upd: $file" | tee -a "$LOG_FILE"
            change_permissions "$CURRENT_DIR/$file"
            mkdir -p "$BACKUP_DIR/$(dirname "$file")"
            cp "$CURRENT_DIR/$file" "$BACKUP_DIR/$file"
            cp "$TMP_DIR/$file" "$CURRENT_DIR/$file"
            ;;
        "D")
            echo "  + new: $file" | tee -a "$LOG_FILE"
            cp "$TMP_DIR/$file" "$CURRENT_DIR/$file"
            ;;
        "??")
            if [[ $file == store/* ]]; then
                echo "   - skip (store): $file" | tee -a "$LOG_FILE"
            else
                echo "  - del: $file" | tee -a "$LOG_FILE"
                if [ -f "$CURRENT_DIR/$file" ]; then
                    mkdir -p "$BACKUP_DIR/$(dirname "$file")"
                    cp "$CURRENT_DIR/$file" "$BACKUP_DIR/$file"
                fi
                sudo rm -rf "$CURRENT_DIR/$file"
            fi
            ;;
    esac
    [[ $file == frontend* ]] && BUILD_FRONTEND=true
    [[ $file == backend/requirements.txt ]] && BUILD_BACKEND=true
done < <(git status --porcelain)

echo "üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞:" | tee -a "$LOG_FILE"
changes=$(git diff --summary HEAD)
while IFS= read -r line; do
    if [[ $line =~ mode\ change\ 100([0-7]{3})\ =>\ 100([0-7]{3})\ (.*) ]]; then
        old_mode=${BASH_REMATCH[1]}
        new_mode=${BASH_REMATCH[2]}
        file=${BASH_REMATCH[3]}

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤–æ–π —Ä–µ–∂–∏–º –≤ –≤–æ—Å—å–º–µ—Ä–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        sudo chmod "0$old_mode" "$file"
        echo "  - $file ($old_mode -> $new_mode)"
    fi
done <<< "$changes"

if [ "$BUILD_FRONTEND" = true ]; then
    echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..." | tee -a "$LOG_FILE"
    make build_frontend >>"$LOG_FILE" 2>&1
else
    echo "üî∂ –ò–∑–º–µ–Ω–µ–Ω–∏–π –≤–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ –Ω–µ—Ç." | tee -a "$LOG_FILE"
fi

if [ "$BUILD_BACKEND" = true ]; then
    echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –±—ç–∫–µ–Ω–¥–∞..." | tee -a "$LOG_FILE"
    cd "$CURRENT_DIR/backend" || exit 1
    pip install -r requirements.txt --break-system-packages >>"$LOG_FILE" 2>&1
    sudo docker rm app_server --force
    sudo docker image rm server --force >>"$LOG_FILE" 2>&1
else
    echo "üî∂ –ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±—ç–∫–µ–Ω–¥–µ –Ω–µ—Ç." | tee -a "$LOG_FILE"
fi

# set permissions and ownership in store dir for all files
sudo chmod -R 777 "$CURRENT_DIR/store"
sudo chown -R "$(whoami):$(whoami)" "$CURRENT_DIR/store"

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
cd "$CURRENT_DIR" || exit 1
echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä..." | tee -a "$LOG_FILE"
make run_prod >>"$LOG_FILE" 2>&1

echo "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω! $(date)" | tee -a "$LOG_FILE"
